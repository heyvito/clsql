(ns clsql.require-queries-test
  (:require [clojure.test :refer :all]
            [clsql.core :refer [require-queries]]
            [clsql.helpers :refer [databaseless-config]]))

(require-queries [simple :refer [select-twenty-four]]
                 [simple :as sample]
                 [placeholder :refer [query-with-placeholder]]
                 [placeholder :as placeholder-test])

(deftest test-metadata
  (testing "autogenerated metadata for non-star function"
    (let [{:keys [name arglists doc]} (meta #'select-twenty-four)]
      (is (= (symbol 'select-twenty-four) name))
      (is (= 1 (count arglists)))
      (is (= '[& args*] (first arglists)))
      (is (= doc (str "This is a documentation block. It should be present in the function's documentation.\n\n"
                      "  Arguments\n"
                      "  ---------\n"
                      "  args must be a list of keyword-value containing required arguments\n"
                      "  to execute this function.")))))
  (testing "autogenerated metadata for star function"
    (let [{:keys [name arglists doc]} (meta #'select-twenty-four*)]
      (is (= (symbol 'select-twenty-four*) name))
      (is (= 1 (count arglists)))
      (is (= '[db args? & opts*] (first arglists)))
      (is (= doc (str "This is a documentation block. It should be present in the function's documentation.\n\n"
                      "  Arguments\n"
                      "  ---------\n"
                      "  db must be a database spec or transaction, as defined by clojure.jdbc\n"
                      "  args must be a map of required arguments for this query, or nil\n"
                      "  opts may be a list of options to be passed to clojure.jdbc"))))))

(deftest test-running
  (testing "execution with refer"
    (let [raw-result (select-twenty-four* databaseless-config)
          {:keys [test_result]} raw-result]
      (is (= 24 test_result)))
    (let [raw-result (query-with-placeholder* databaseless-config {:number 27})
          {:keys [test_result]} raw-result]
      (is (= 27 test_result))))

  (testing "execution with as"
    (let [raw-result (sample/select-twenty-four* databaseless-config)
          {:keys [test_result]} raw-result]
      (is (= 24 test_result)))
    (let [raw-result (placeholder-test/query-with-placeholder* databaseless-config {:number 27})
          {:keys [test_result]} raw-result]
      (is (= 27 test_result)))))
